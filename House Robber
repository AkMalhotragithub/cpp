class Solution {
    private:
    int solve(int index, vector<int>&dp,vector<int>& nums){
        if(index==0){
            return nums[index];
        }
        if(index<0){
            return 0;
        }
        int nottake=0+solve(index-1,dp,nums);
        int take =nums[index]+solve(index-2,dp,nums);
        dp[index]=max(take,nottake);
        return dp[index];
    }
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
        // vector<int>dp(n,-1);
       // return  solve(n-1,dp,nums);
         vector<int>dp(n,0);
        
        dp[0]=nums[0];
        int neg=0;
        int i;
        for(i=1;i<n;i++){
            
              int take=nums[i];
            
            if(i>1){
           take+=dp[i-2];}
            
             int nottake=0+dp[i-1];
          
        dp[i]=max(take,nottake);
            
        }
        return dp[n-1];
        
        
        
        
    }
};
